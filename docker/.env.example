# https://docs.dify.ai/getting-started/install-self-hosted/environments
# ------------------------------
# API 서비스 & 워커를 위한 환경 변수
# ------------------------------

# ------------------------------
# 공통 변수
# ------------------------------

# 콘솔 API의 백엔드 URL,
# 인증 콜백을 연결하는데 사용됩니다.
# 비어있다면 동일한 도메인을 사용합니다.
# 예시: https://api.console.dify.ai
CONSOLE_API_URL=

# 콘솔 웹의 프론트엔드 URL,
# 일부 프론트엔드 주소 연결과 CORS 설정에 사용됩니다.
# 비어있다면 동일한 도메인을 사용합니다.
# 예시: https://console.dify.ai
CONSOLE_WEB_URL=

# 서비스 API URL,
# 프론트엔드에 서비스 API 기본 URL을 표시하는데 사용됩니다.
# 비어있다면 동일한 도메인을 사용합니다.
# 예시: https://api.dify.ai
SERVICE_API_URL=

# WebApp API 백엔드 URL,
# 프론트엔드 API의 백엔드 URL을 선언하는데 사용됩니다.
# 비어있다면 동일한 도메인을 사용합니다.
# 예시: https://api.app.dify.ai
APP_API_URL=

# WebApp URL,
# 프론트엔드에 WebAPP API 기본 URL을 표시하는데 사용됩니다.
# 비어있다면 동일한 도메인을 사용합니다.
# 예시: https://app.dify.ai
APP_WEB_URL=

# 파일 미리보기 또는 다운로드 URL 접두사.
# 프론트엔드나 멀티모델 입력으로 파일 미리보기 또는 다운로드 URL을 표시하는데 사용됩니다.
# URL은 서명되어 있으며 만료 시간이 있습니다.
FILES_URL=

# ------------------------------
# 서버 설정
# ------------------------------

# 애플리케이션의 로그 레벨.
# 지원되는 값은 `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`입니다
LOG_LEVEL=INFO
# 로그 파일 경로
LOG_FILE=/app/logs/server.log
# 로그 파일 최대 크기, 단위는 MB
LOG_FILE_MAX_SIZE=20
# 로그 파일 최대 백업 수
LOG_FILE_BACKUP_COUNT=5
# 로그 날짜 형식
LOG_DATEFORMAT=%Y-%m-%d %H:%M:%S
# 로그 시간대
LOG_TZ=UTC

# 디버그 모드, 기본값은 false입니다.
# 로컬 개발 시 몽키 패치로 인한 문제를 방지하기 위해
# 이 설정을 켜는 것을 권장합니다.
DEBUG=false

# Flask 디버그 모드, 켜면 인터페이스에서 추적 정보를 출력할 수 있어
# 디버깅에 편리합니다.
FLASK_DEBUG=false

# 세션 쿠키를 안전하게 서명하고 데이터베이스의 민감한 정보를
# 암호화하는데 사용되는 비밀키입니다.
# `openssl rand -base64 42`를 사용하여 강력한 키를 생성할 수 있습니다.
SECRET_KEY=sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U

# 관리자 사용자 초기화를 위한 비밀번호.
# 설정하지 않으면 초기 관리자 계정 생성 시
# 비밀번호를 입력하라는 메시지가 표시되지 않습니다.
# 비밀번호 길이는 30자를 초과할 수 없습니다.
INIT_PASSWORD=

# 배포 환경.
# 지원되는 값은 `PRODUCTION`, `TESTING`입니다. 기본값은 `PRODUCTION`입니다.
# 테스트 환경. 프론트엔드 페이지에 이 환경이 테스트 환경임을
# 나타내는 색상 라벨이 표시됩니다.
DEPLOY_ENV=PRODUCTION

# 버전 확인 정책 활성화 여부.
# 비어있으면 버전 확인을 위해 https://updates.dify.ai가 호출됩니다.
CHECK_UPDATE_URL=https://updates.dify.ai

# OpenAI 기본 주소를 변경하는데 사용됩니다. 기본값은 https://api.openai.com/v1입니다.
# 중국에서 OpenAI에 접근할 수 없을 때 국내 미러 주소로 대체하거나,
# 로컬 모델이 OpenAI 호환 API를 제공할 때 대체할 수 있습니다.
OPENAI_API_BASE=https://api.openai.com/v1

# 활성화되면 애플리케이션 시작 전에 마이그레이션이 실행되며
# 마이그레이션이 완료된 후 애플리케이션이 시작됩니다.
MIGRATION_ENABLED=true

# 파일 접근 시간은 파일에 접근할 수 있는 시간 간격을 초 단위로 지정합니다.
# 기본값은 300초입니다.
FILES_ACCESS_TIMEOUT=300

# 액세스 토큰 만료 시간(분)
ACCESS_TOKEN_EXPIRE_MINUTES=60

# 리프레시 토큰 만료 시간(일)
REFRESH_TOKEN_EXPIRE_DAYS=30

# 애플리케이션의 최대 활성 요청 수, 0은 무제한을 의미하며 음이 아닌 정수여야 합니다.
APP_MAX_ACTIVE_REQUESTS=0
APP_MAX_EXECUTION_TIME=1200

# ------------------------------
# 컨테이너 시작 관련 설정
# 도커 이미지나 도커 컴포즈로 시작할 때만 유효합니다.
# ------------------------------

# API 서비스 바인딩 주소, 기본값: 0.0.0.0, 즉 모든 주소에서 접근 가능합니다.
DIFY_BIND_ADDRESS=0.0.0.0

# API 서비스 바인딩 포트 번호, 기본값 5001.
DIFY_PORT=5001

# API 서버 워커 수, 즉 워커의 수입니다.
# 공식: CPU 코어 수 x 2 + 1 (sync의 경우), Gevent의 경우 1
# 참고: https://docs.gunicorn.org/en/stable/design.html#how-many-workers
SERVER_WORKER_AMOUNT=1

# 기본값은 gevent입니다. Windows를 사용하는 경우 sync나 solo로 전환할 수 있습니다.
SERVER_WORKER_CLASS=gevent

# 기본 워커 연결 수, 기본값은 10입니다.
SERVER_WORKER_CONNECTIONS=10

# SERVER_WORKER_CLASS와 유사합니다.
# Windows를 사용하는 경우 sync나 solo로 전환할 수 있습니다.
CELERY_WORKER_CLASS=

# 요청 처리 타임아웃. 기본값은 200이며,
# 더 긴 sse 연결 시간을 지원하기 위해 360으로 설정하는 것이 권장됩니다.
GUNICORN_TIMEOUT=360

# Celery 워커 수. 기본값은 1이며, 필요에 따라 설정할 수 있습니다.
CELERY_WORKER_AMOUNT=

# Celery 워커의 자동 확장 활성화 여부를 나타내는 플래그입니다.
#
# 자동 확장은 작업이 CPU 집약적이고 워크로드에 따라 
# 동적으로 할당 및 해제될 수 있을 때 유용합니다.
#
# 자동 확장이 활성화되면 최대 및 최소 워커 수를 
# 지정할 수 있습니다. 자동 확장 알고리즘은 지정된 범위 내에서 
# 워커 수를 동적으로 조정합니다.
#
# 기본값은 false입니다(즉, 자동 확장이 비활성화됨).
#
# 예시:
# CELERY_AUTO_SCALE=true
CELERY_AUTO_SCALE=false

# 자동 확장될 수 있는 최대 Celery 워커 수입니다.
# 이는 선택사항이며 자동 확장이 활성화된 경우에만 사용됩니다.
# 기본값은 설정되지 않습니다.
CELERY_MAX_WORKERS=

# 자동 확장될 수 있는 최소 Celery 워커 수입니다.
# 이는 선택사항이며 자동 확장이 활성화된 경우에만 사용됩니다.
# 기본값은 설정되지 않습니다.
CELERY_MIN_WORKERS=

# API 도구 설정
API_TOOL_DEFAULT_CONNECT_TIMEOUT=10
API_TOOL_DEFAULT_READ_TIMEOUT=60


# ------------------------------
# 데이터베이스 설정
# 데이터베이스는 PostgreSQL을 사용합니다. public 스키마를 사용하세요.
# 아래의 'db' 서비스 설정과 일치해야 합니다.
# ------------------------------

DB_USERNAME=postgres
DB_PASSWORD=difyai123456
DB_HOST=db
DB_PORT=5432
DB_DATABASE=dify
# 데이터베이스 연결 풀의 크기입니다.
# 기본값은 30개 연결이며, 적절히 증가시킬 수 있습니다.
SQLALCHEMY_POOL_SIZE=30
# 데이터베이스 연결 풀 재활용 시간, 기본값은 3600초입니다.
SQLALCHEMY_POOL_RECYCLE=3600
# SQL 출력 여부, 기본값은 false입니다.
SQLALCHEMY_ECHO=false

# 데이터베이스에 대한 최대 연결 수
# 기본값은 100입니다
#
# 참고: https://www.postgresql.org/docs/current/runtime-config-connection.html#GUC-MAX-CONNECTIONS
POSTGRES_MAX_CONNECTIONS=100

# postgres의 공유 버퍼에 사용되는 공유 메모리의 양을 설정합니다.
# 기본값은 128MB
# 권장값: 사용 가능한 메모리의 25%
# 참고: https://www.postgresql.org/docs/current/runtime-config-resource.html#GUC-SHARED-BUFFERS
POSTGRES_SHARED_BUFFERS=128MB

# 데이터베이스 작업자당 작업 공간으로 사용되는 메모리의 양을 설정합니다.
# 기본값은 4MB입니다
#
# 참고: https://www.postgresql.org/docs/current/runtime-config-resource.html#GUC-WORK-MEM
POSTGRES_WORK_MEM=4MB

# 유지보수 작업을 위해 예약된 메모리의 양을 설정합니다.
# 기본값은 64MB입니다
#
# 참고: https://www.postgresql.org/docs/current/runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM
POSTGRES_MAINTENANCE_WORK_MEM=64MB

# 플래너의 효과적인 캐시 크기에 대한 가정을 설정합니다.
# 기본값은 4096MB입니다
#
# 참고: https://www.postgresql.org/docs/current/runtime-config-query.html#GUC-EFFECTIVE-CACHE-SIZE
POSTGRES_EFFECTIVE_CACHE_SIZE=4096MB

# ------------------------------
# Redis 설정
# 이 Redis 설정은 캐싱과 대화 중 pub/sub에 사용됩니다.
# ------------------------------

REDIS_HOST=redis
REDIS_PORT=6379
REDIS_USERNAME=
REDIS_PASSWORD=difyai123456
REDIS_USE_SSL=false
REDIS_DB=0

# Redis Sentinel 모드 사용 여부.
# true로 설정하면, 애플리케이션은 Sentinel을 통해 자동으로 마스터 노드를 발견하고 연결합니다.
REDIS_USE_SENTINEL=false

# Redis Sentinel 노드 목록. Sentinel 모드가 활성화된 경우 최소 하나의 Sentinel IP와 포트를 제공하세요.
# 형식: `<sentinel1_ip>:<sentinel1_port>,<sentinel2_ip>:<sentinel2_port>,<sentinel3_ip>:<sentinel3_port>`
REDIS_SENTINELS=
REDIS_SENTINEL_SERVICE_NAME=
REDIS_SENTINEL_USERNAME=
REDIS_SENTINEL_PASSWORD=
REDIS_SENTINEL_SOCKET_TIMEOUT=0.1

# Redis Cluster 노드 목록. Cluster 모드가 활성화된 경우 최소 하나의 Cluster IP와 포트를 제공하세요.
# 형식: `<Cluster1_ip>:<Cluster1_port>,<Cluster2_ip>:<Cluster2_port>,<Cluster3_ip>:<Cluster3_port>`
REDIS_USE_CLUSTERS=false
REDIS_CLUSTERS=
REDIS_CLUSTERS_PASSWORD=

# ------------------------------
# Celery 설정
# ------------------------------

# Redis를 브로커로 사용하고, Redis db 1을 Celery 브로커로 사용합니다.
# 형식은 다음과 같습니다: `redis://<redis_username>:<redis_password>@<redis_host>:<redis_port>/<redis_database>`
# 예시: redis://:difyai123456@redis:6379/1
# Redis Sentinel을 사용하는 경우 형식은 다음과 같습니다: `sentinel://<sentinel_username>:<sentinel_password>@<sentinel_host>:<sentinel_port>/<redis_database>`
# 예시: sentinel://localhost:26379/1;sentinel://localhost:26380/1;sentinel://localhost:26381/1
CELERY_BROKER_URL=redis://:difyai123456@redis:6379/1
BROKER_USE_SSL=false

# Redis Sentinel을 고가용성을 위해 사용하는 경우 다음 설정을 구성하세요.
CELERY_USE_SENTINEL=false
CELERY_SENTINEL_MASTER_NAME=
CELERY_SENTINEL_SOCKET_TIMEOUT=0.1

# ------------------------------
# CORS 설정
# 프론트엔드 크로스 도메인 접근 정책을 설정하는데 사용됩니다.
# ------------------------------

# Web API에 대한 크로스 오리진 요청에 허용된 오리진을 지정합니다.
# 예: https://dify.app 또는 모든 오리진의 경우 *
WEB_API_CORS_ALLOW_ORIGINS=*

# 콘솔 API에 대한 크로스 오리진 요청에 허용된 오리진을 지정합니다.
# 예: https://cloud.dify.ai 또는 모든 오리진의 경우 *
CONSOLE_CORS_ALLOW_ORIGINS=*

# ------------------------------
# 파일 저장소 설정
# ------------------------------

# 사용자 파일 저장에 사용할 저장소 유형.
STORAGE_TYPE=opendal

# Apache OpenDAL 설정
# OpenDAL 설정은 다음 형식으로 구성됩니다: OPENDAL_<SCHEME_NAME>_<CONFIG_NAME>.
# 저장소의 모든 서비스 설정(CONFIG_NAME)은 다음 저장소에서 찾을 수 있습니다: https://github.com/apache/opendal/tree/main/core/src/services
# Dify는 OPENDAL_<SCHEME_NAME>으로 시작하는 설정을 스캔하고 자동으로 적용합니다.
# OpenDAL 저장소의 스키마 이름.
OPENDAL_SCHEME=fs
# OpenDAL 로컬 파일 시스템 설정.
OPENDAL_FS_ROOT=storage

# S3 설정
#
S3_ENDPOINT=
S3_REGION=us-east-1
S3_BUCKET_NAME=difyai
S3_ACCESS_KEY=
S3_SECRET_KEY=
# S3 서비스 인증에 AWS 관리형 IAM 역할을 사용할지 여부.
# false로 설정하면 액세스 키와 시크릿 키를 제공해야 합니다.
S3_USE_AWS_MANAGED_IAM=false

# Azure Blob 설정
#
AZURE_BLOB_ACCOUNT_NAME=difyai
AZURE_BLOB_ACCOUNT_KEY=difyai
AZURE_BLOB_CONTAINER_NAME=difyai-container
AZURE_BLOB_ACCOUNT_URL=https://<your_account_name>.blob.core.windows.net

# Google Storage 설정
#
GOOGLE_STORAGE_BUCKET_NAME=your-bucket-name
GOOGLE_STORAGE_SERVICE_ACCOUNT_JSON_BASE64=

# 알리바바 클라우드 OSS 설정
#
ALIYUN_OSS_BUCKET_NAME=your-bucket-name
ALIYUN_OSS_ACCESS_KEY=your-access-key
ALIYUN_OSS_SECRET_KEY=your-secret-key
ALIYUN_OSS_ENDPOINT=https://oss-ap-southeast-1-internal.aliyuncs.com
ALIYUN_OSS_REGION=ap-southeast-1
ALIYUN_OSS_AUTH_VERSION=v4
# '/'로 시작하지 마세요. OSS는 객체 이름에 선행 슬래시를 지원하지 않습니다.
ALIYUN_OSS_PATH=your-path

# 텐센트 COS 설정
#
TENCENT_COS_BUCKET_NAME=your-bucket-name
TENCENT_COS_SECRET_KEY=your-secret-key
TENCENT_COS_SECRET_ID=your-secret-id
TENCENT_COS_REGION=your-region
TENCENT_COS_SCHEME=your-scheme

# Oracle Storage 설정
#
OCI_ENDPOINT=https://objectstorage.us-ashburn-1.oraclecloud.com
OCI_BUCKET_NAME=your-bucket-name
OCI_ACCESS_KEY=your-access-key
OCI_SECRET_KEY=your-secret-key
OCI_REGION=us-ashburn-1

# 화웨이 OBS 설정
#
HUAWEI_OBS_BUCKET_NAME=your-bucket-name
HUAWEI_OBS_SECRET_KEY=your-secret-key
HUAWEI_OBS_ACCESS_KEY=your-access-key
HUAWEI_OBS_SERVER=your-server-url

# Volcengine TOS 설정
#
VOLCENGINE_TOS_BUCKET_NAME=your-bucket-name
VOLCENGINE_TOS_SECRET_KEY=your-secret-key
VOLCENGINE_TOS_ACCESS_KEY=your-access-key
VOLCENGINE_TOS_ENDPOINT=your-server-url
VOLCENGINE_TOS_REGION=your-region

# 바이두 OBS 저장소 설정
#
BAIDU_OBS_BUCKET_NAME=your-bucket-name
BAIDU_OBS_SECRET_KEY=your-secret-key
BAIDU_OBS_ACCESS_KEY=your-access-key
BAIDU_OBS_ENDPOINT=your-server-url

# Supabase 저장소 설정
#
SUPABASE_BUCKET_NAME=your-bucket-name
SUPABASE_API_KEY=your-access-key
SUPABASE_URL=your-server-url

# ------------------------------
# 벡터 데이터베이스 설정
# ------------------------------

# 사용할 벡터 저장소 유형.
# 지원되는 값: `weaviate`, `qdrant`, `milvus`, `myscale`, `relyt`, `pgvector`, `pgvecto-rs`, `chroma`, `opensearch`, `tidb_vector`, `oracle`, `tencent`, `elasticsearch`, `elasticsearch-ja`, `analyticdb`, `couchbase`, `vikingdb`, `oceanbase`
VECTOR_STORE=weaviate

# Weaviate 엔드포인트 URL. VECTOR_STORE가 `weaviate`일 때만 사용 가능.
WEAVIATE_ENDPOINT=http://weaviate:8080
WEAVIATE_API_KEY=WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih

# Qdrant 엔드포인트 URL. VECTOR_STORE가 `qdrant`일 때만 사용 가능.
QDRANT_URL=http://qdrant:6333
QDRANT_API_KEY=difyai123456
QDRANT_CLIENT_TIMEOUT=20
QDRANT_GRPC_ENABLED=false
QDRANT_GRPC_PORT=6334

# Milvus 설정. VECTOR_STORE가 `milvus`일 때만 사용 가능
# Milvus URI.
MILVUS_URI=http://127.0.0.1:19530
MILVUS_TOKEN=
MILVUS_USER=root
MILVUS_PASSWORD=Milvus
MILVUS_ENABLE_HYBRID_SEARCH=False

# MyScale 설정, VECTOR_STORE가 `myscale`일 때만 사용 가능
# 다국어 지원을 위해서는 다음을 참고하여 MYSCALE_FTS_PARAMS를 설정하세요:
# https://myscale.com/docs/en/text-search/#understanding-fts-index-parameters
MYSCALE_HOST=myscale
MYSCALE_PORT=8123
MYSCALE_USER=default
MYSCALE_PASSWORD=
MYSCALE_DATABASE=dify
MYSCALE_FTS_PARAMS=

# Couchbase 설정, VECTOR_STORE가 `couchbase`일 때만 사용 가능
# 연결 문자열은 도커 컴포즈 파일에 정의된 호스트 이름을 포함해야 합니다(이 경우 couchbase-server)
COUCHBASE_CONNECTION_STRING=couchbase://couchbase-server
COUCHBASE_USER=Administrator
COUCHBASE_PASSWORD=password
COUCHBASE_BUCKET_NAME=Embeddings
COUCHBASE_SCOPE_NAME=_default

# pgvector 설정, VECTOR_STORE가 `pgvector`일 때만 사용 가능
PGVECTOR_HOST=pgvector
PGVECTOR_PORT=5432
PGVECTOR_USER=postgres
PGVECTOR_PASSWORD=difyai123456
PGVECTOR_DATABASE=dify
PGVECTOR_MIN_CONNECTION=1
PGVECTOR_MAX_CONNECTION=5

# pgvecto-rs 설정, VECTOR_STORE가 `pgvecto-rs`일 때만 사용 가능
PGVECTO_RS_HOST=pgvecto-rs
PGVECTO_RS_PORT=5432
PGVECTO_RS_USER=postgres
PGVECTO_RS_PASSWORD=difyai123456
PGVECTO_RS_DATABASE=dify

# analyticdb 설정, VECTOR_STORE가 `analyticdb`일 때만 사용 가능
ANALYTICDB_KEY_ID=your-ak
ANALYTICDB_KEY_SECRET=your-sk
ANALYTICDB_REGION_ID=cn-hangzhou
ANALYTICDB_INSTANCE_ID=gp-ab123456
ANALYTICDB_ACCOUNT=testaccount
ANALYTICDB_PASSWORD=testpassword
ANALYTICDB_NAMESPACE=dify
ANALYTICDB_NAMESPACE_PASSWORD=difypassword
ANALYTICDB_HOST=gp-test.aliyuncs.com
ANALYTICDB_PORT=5432
ANALYTICDB_MIN_CONNECTION=1
ANALYTICDB_MAX_CONNECTION=5

# TiDB 벡터 설정, VECTOR_STORE가 `tidb`일 때만 사용 가능
TIDB_VECTOR_HOST=tidb
TIDB_VECTOR_PORT=4000
TIDB_VECTOR_USER=
TIDB_VECTOR_PASSWORD=
TIDB_VECTOR_DATABASE=dify

# Tidb on qdrant 설정, VECTOR_STORE가 `tidb_on_qdrant`일 때만 사용 가능
TIDB_ON_QDRANT_URL=http://127.0.0.1
TIDB_ON_QDRANT_API_KEY=dify
TIDB_ON_QDRANT_CLIENT_TIMEOUT=20
TIDB_ON_QDRANT_GRPC_ENABLED=false
TIDB_ON_QDRANT_GRPC_PORT=6334
TIDB_PUBLIC_KEY=dify
TIDB_PRIVATE_KEY=dify
TIDB_API_URL=http://127.0.0.1
TIDB_IAM_API_URL=http://127.0.0.1
TIDB_REGION=regions/aws-us-east-1
TIDB_PROJECT_ID=dify
TIDB_SPEND_LIMIT=100

# Chroma 설정, VECTOR_STORE가 `chroma`일 때만 사용 가능
CHROMA_HOST=127.0.0.1
CHROMA_PORT=8000
CHROMA_TENANT=default_tenant
CHROMA_DATABASE=default_database
CHROMA_AUTH_PROVIDER=chromadb.auth.token_authn.TokenAuthClientProvider
CHROMA_AUTH_CREDENTIALS=

# Oracle 설정, VECTOR_STORE가 `oracle`일 때만 사용 가능
ORACLE_HOST=oracle
ORACLE_PORT=1521
ORACLE_USER=dify
ORACLE_PASSWORD=dify
ORACLE_DATABASE=FREEPDB1

# relyt 설정, VECTOR_STORE가 `relyt`일 때만 사용 가능
RELYT_HOST=db
RELYT_PORT=5432
RELYT_USER=postgres
RELYT_PASSWORD=difyai123456
RELYT_DATABASE=postgres

# opensearch 설정, VECTOR_STORE가 `opensearch`일 때만 사용 가능
OPENSEARCH_HOST=opensearch
OPENSEARCH_PORT=9200
OPENSEARCH_USER=admin
OPENSEARCH_PASSWORD=admin
OPENSEARCH_SECURE=true

# tencent 벡터 설정, VECTOR_STORE가 `tencent`일 때만 사용 가능
TENCENT_VECTOR_DB_URL=http://127.0.0.1
TENCENT_VECTOR_DB_API_KEY=dify
TENCENT_VECTOR_DB_TIMEOUT=30
TENCENT_VECTOR_DB_USERNAME=dify
TENCENT_VECTOR_DB_DATABASE=dify
TENCENT_VECTOR_DB_SHARD=1
TENCENT_VECTOR_DB_REPLICAS=2

# ElasticSearch 설정, VECTOR_STORE가 `elasticsearch`일 때만 사용 가능
ELASTICSEARCH_HOST=0.0.0.0
ELASTICSEARCH_PORT=9200
ELASTICSEARCH_USERNAME=elastic
ELASTICSEARCH_PASSWORD=elastic
KIBANA_PORT=5601

# baidu 벡터 설정, VECTOR_STORE가 `baidu`일 때만 사용 가능
BAIDU_VECTOR_DB_ENDPOINT=http://127.0.0.1:5287
BAIDU_VECTOR_DB_CONNECTION_TIMEOUT_MS=30000
BAIDU_VECTOR_DB_ACCOUNT=root
BAIDU_VECTOR_DB_API_KEY=dify
BAIDU_VECTOR_DB_DATABASE=dify
BAIDU_VECTOR_DB_SHARD=1
BAIDU_VECTOR_DB_REPLICAS=3

# VikingDB 설정, VECTOR_STORE가 `vikingdb`일 때만 사용 가능
VIKINGDB_ACCESS_KEY=your-ak
VIKINGDB_SECRET_KEY=your-sk
VIKINGDB_REGION=cn-shanghai
VIKINGDB_HOST=api-vikingdb.xxx.volces.com
VIKINGDB_SCHEMA=http
VIKINGDB_CONNECTION_TIMEOUT=30
VIKINGDB_SOCKET_TIMEOUT=30

# Lindorm 설정, VECTOR_STORE가 `lindorm`일 때만 사용 가능
LINDORM_URL=http://lindorm:30070
LINDORM_USERNAME=lindorm
LINDORM_PASSWORD=lindorm

# OceanBase 벡터 설정, VECTOR_STORE가 `oceanbase`일 때만 사용 가능
OCEANBASE_VECTOR_HOST=oceanbase
OCEANBASE_VECTOR_PORT=2881
OCEANBASE_VECTOR_USER=root@test
OCEANBASE_VECTOR_PASSWORD=difyai123456
OCEANBASE_VECTOR_DATABASE=test
OCEANBASE_CLUSTER_NAME=difyai
OCEANBASE_MEMORY_LIMIT=6G

# Upstash 벡터 설정, VECTOR_STORE가 `upstash`일 때만 사용 가능
UPSTASH_VECTOR_URL=https://xxx-vector.upstash.io
UPSTASH_VECTOR_TOKEN=dify

# ------------------------------
# 지식 설정
# ------------------------------

# 업로드 파일 크기 제한, 기본값 15M.
UPLOAD_FILE_SIZE_LIMIT=15

# 한 번에 업로드할 수 있는 최대 파일 수, 기본값 5.
UPLOAD_FILE_BATCH_LIMIT=5

# ETL 유형, 지원: `dify`, `Unstructured`
# `dify` Dify의 독점 파일 추출 방식
# `Unstructured` Unstructured.io 파일 추출 방식
ETL_TYPE=dify

# Unstructured API 경로와 API 키, ETL_TYPE이 Unstructured일 때 설정 필요
# 또는 pptx용 문서 추출기 노드에 Unstructured를 사용할 때.
# 예시: http://unstructured:8000/general/v0/general
UNSTRUCTURED_API_URL=
UNSTRUCTURED_API_KEY=
SCARF_NO_ANALYTICS=true

# ------------------------------
# 모델 설정
# ------------------------------

# 프롬프트 생성에 허용되는 최대 토큰 수.
# 이 설정은 프롬프트 생성 도구에서 LLM이 사용할 수 있는
# 토큰의 상한선을 제어합니다.
# 기본값: 512 토큰.
PROMPT_GENERATION_MAX_TOKENS=512

# 코드 생성에 허용되는 최대 토큰 수.
# 이 설정은 코드 생성 도구에서 LLM이 사용할 수 있는
# 토큰의 상한선을 제어합니다.
# 기본값: 1024 토큰.
CODE_GENERATION_MAX_TOKENS=1024

# ------------------------------
# 멀티모달 설정
# ------------------------------

# 멀티모달 모델 입력 시 이미지/비디오/오디오/문서를 전송하는 형식,
# 기본값은 base64이며, url도 선택 가능합니다.
# url 모드의 호출 지연시간이 base64 모드보다 낮을 것입니다.
# 일반적으로 더 호환성이 좋은 base64 모드를 사용하는 것이 권장됩니다.
# url로 설정하는 경우 멀티모달 모델이 이미지/비디오/오디오/문서에 접근할 수 있도록 FILES_URL을 외부에서 접근 가능한 주소로 설정해야 합니다.
MULTIMODAL_SEND_FORMAT=base64
# 이미지 파일 업로드 크기 제한, 기본값 10M.
UPLOAD_IMAGE_FILE_SIZE_LIMIT=10
# 비디오 파일 업로드 크기 제한, 기본값 100M.
UPLOAD_VIDEO_FILE_SIZE_LIMIT=100
# 오디오 파일 업로드 크기 제한, 기본값 50M.
UPLOAD_AUDIO_FILE_SIZE_LIMIT=50

# ------------------------------
# Sentry 설정
# 애플리케이션 모니터링 및 오류 로그 추적에 사용됩니다.
# ------------------------------
SENTRY_DSN=

# API 서비스 Sentry DSN 주소, 기본값은 비어 있으며, 비어 있을 때
# 모든 모니터링 정보는 Sentry에 보고되지 않습니다.
# 설정하지 않으면 Sentry 오류 보고가 비활성화됩니다.
API_SENTRY_DSN=
# API 서비스의 Sentry 이벤트 보고 비율, 0.01이면 1%입니다.
API_SENTRY_TRACES_SAMPLE_RATE=1.0
# API 서비스의 Sentry 프로필 보고 비율, 0.01이면 1%입니다.
API_SENTRY_PROFILES_SAMPLE_RATE=1.0

# 웹 서비스 Sentry DSN 주소, 기본값은 비어 있으며, 비어 있을 때
# 모든 모니터링 정보는 Sentry에 보고되지 않습니다.
# 설정하지 않으면 Sentry 오류 보고가 비활성화됩니다.
WEB_SENTRY_DSN=

# ------------------------------
# Notion 통합 설정
# 변수는 Notion 통합 신청을 통해 얻을 수 있습니다: https://www.notion.so/my-integrations
# ------------------------------

# "public" 또는 "internal"로 설정합니다.
# Notion의 OAuth 리다이렉트 URL은 HTTPS만 지원하므로,
# 로컬에 배포하는 경우 Notion의 내부 통합을 사용하세요.
NOTION_INTEGRATION_TYPE=public
# Notion OAuth 클라이언트 시크릿 (public 통합 유형에 사용)
NOTION_CLIENT_SECRET=
# Notion OAuth 클라이언트 ID (public 통합 유형에 사용)
NOTION_CLIENT_ID=
# Notion 내부 통합 시크릿.
# NOTION_INTEGRATION_TYPE 값이 "internal"인 경우
# 이 변수를 설정해야 합니다.
NOTION_INTERNAL_SECRET=

# ------------------------------
# 메일 관련 설정
# ------------------------------

# 메일 유형, 지원: resend, smtp
MAIL_TYPE=resend

# 기본 발신 이메일 주소, 지정되지 않은 경우
MAIL_DEFAULT_SEND_FROM=

# Resend 이메일 제공자를 위한 API 키, MAIL_TYPE이 `resend`일 때 사용됩니다.
RESEND_API_URL=https://api.resend.com
RESEND_API_KEY=your-resend-api-key


# SMTP 서버 설정, MAIL_TYPE이 `smtp`일 때 사용됩니다
SMTP_SERVER=
SMTP_PORT=465
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_USE_TLS=true
SMTP_OPPORTUNISTIC_TLS=false

# ------------------------------
# 기타 설정
# ------------------------------

# 인덱싱을 위한 세그멘테이션 토큰의 최대 길이
INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH=4000

# 멤버 초대 링크 유효 시간(시간),
# 기본값: 72.
INVITE_EXPIRY_HOURS=72

# 비밀번호 재설정 토큰 유효 시간(분),
RESET_PASSWORD_TOKEN_EXPIRY_MINUTES=5

# 샌드박스 서비스 엔드포인트.
CODE_EXECUTION_ENDPOINT=http://sandbox:8194
CODE_EXECUTION_API_KEY=dify-sandbox
CODE_MAX_NUMBER=9223372036854775807
CODE_MIN_NUMBER=-9223372036854775808
CODE_MAX_DEPTH=5
CODE_MAX_PRECISION=20
CODE_MAX_STRING_LENGTH=80000
CODE_MAX_STRING_ARRAY_LENGTH=30
CODE_MAX_OBJECT_ARRAY_LENGTH=30
CODE_MAX_NUMBER_ARRAY_LENGTH=1000
CODE_EXECUTION_CONNECT_TIMEOUT=10
CODE_EXECUTION_READ_TIMEOUT=60
CODE_EXECUTION_WRITE_TIMEOUT=10
TEMPLATE_TRANSFORM_MAX_LENGTH=80000

# 워크플로우 런타임 설정
WORKFLOW_MAX_EXECUTION_STEPS=500
WORKFLOW_MAX_EXECUTION_TIME=1200
WORKFLOW_CALL_MAX_DEPTH=5
MAX_VARIABLE_SIZE=204800
WORKFLOW_PARALLEL_DEPTH_LIMIT=3
WORKFLOW_FILE_UPLOAD_LIMIT=10

# 워크플로우의 HTTP 요청 노드 설정
HTTP_REQUEST_NODE_MAX_BINARY_SIZE=10485760
HTTP_REQUEST_NODE_MAX_TEXT_SIZE=1048576

# SSRF 프록시 서버 HTTP URL
SSRF_PROXY_HTTP_URL=http://ssrf_proxy:3128
# SSRF 프록시 서버 HTTPS URL
SSRF_PROXY_HTTPS_URL=http://ssrf_proxy:3128

# ------------------------------
# 웹 서비스를 위한 환경 변수
# ------------------------------

# 텍스트 생성 타임아웃(밀리초)
TEXT_GENERATION_TIMEOUT_MS=60000

# ------------------------------
# db 서비스를 위한 환경 변수
# ------------------------------

PGUSER=${DB_USERNAME}
# 기본 postgres 사용자의 비밀번호.
POSTGRES_PASSWORD=${DB_PASSWORD}
# 기본 postgres 데이터베이스의 이름.
POSTGRES_DB=${DB_DATABASE}
# postgres 데이터 디렉토리
PGDATA=/var/lib/postgresql/data/pgdata

# ------------------------------
# 샌드박스 서비스를 위한 환경 변수
# ------------------------------

# 샌드박스 서비스의 API 키
SANDBOX_API_KEY=dify-sandbox
# Gin 프레임워크가 실행되는 모드
SANDBOX_GIN_MODE=release
# 워커의 타임아웃(초)
SANDBOX_WORKER_TIMEOUT=15
# 샌드박스 서비스의 네트워크 활성화
SANDBOX_ENABLE_NETWORK=true
# SSRF 보호를 위한 HTTP 프록시 URL
SANDBOX_HTTP_PROXY=http://ssrf_proxy:3128
# SSRF 보호를 위한 HTTPS 프록시 URL
SANDBOX_HTTPS_PROXY=http://ssrf_proxy:3128
# 샌드박스 서비스가 실행되는 포트
SANDBOX_PORT=8194

# ------------------------------
# weaviate 서비스를 위한 환경 변수
# (VECTOR_STORE가 weaviate일 때만 사용됨)
# ------------------------------
WEAVIATE_PERSISTENCE_DATA_PATH=/var/lib/weaviate
WEAVIATE_QUERY_DEFAULTS_LIMIT=25
WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
WEAVIATE_DEFAULT_VECTORIZER_MODULE=none
WEAVIATE_CLUSTER_HOSTNAME=node1
WEAVIATE_AUTHENTICATION_APIKEY_ENABLED=true
WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS=WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
WEAVIATE_AUTHENTICATION_APIKEY_USERS=hello@dify.ai
WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED=true
WEAVIATE_AUTHORIZATION_ADMINLIST_USERS=hello@dify.ai

# ------------------------------
# Chroma를 위한 환경 변수
# (VECTOR_STORE가 chroma일 때만 사용됨)
# ------------------------------

# Chroma 서버의 인증 자격 증명
CHROMA_SERVER_AUTHN_CREDENTIALS=difyai123456
# Chroma 서버의 인증 제공자
CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.token_authn.TokenAuthenticationServerProvider
# Chroma 서버의 영속성 설정
CHROMA_IS_PERSISTENT=TRUE

# ------------------------------
# Oracle 서비스를 위한 환경 변수
# (VECTOR_STORE가 Oracle일 때만 사용됨)
# ------------------------------
ORACLE_PWD=Dify123456
ORACLE_CHARACTERSET=AL32UTF8

# ------------------------------
# milvus 서비스를 위한 환경 변수
# (VECTOR_STORE가 milvus일 때만 사용됨)
# ------------------------------
# ETCD 자동 압축 모드 설정
ETCD_AUTO_COMPACTION_MODE=revision
# ETCD 자동 압축 보존 리비전 수
ETCD_AUTO_COMPACTION_RETENTION=1000
# ETCD 백엔드 할당량(바이트)
ETCD_QUOTA_BACKEND_BYTES=4294967296
# 스냅샷을 트리거하기 전의 변경 수
ETCD_SNAPSHOT_COUNT=50000
# MinIO 인증을 위한 액세스 키
MINIO_ACCESS_KEY=minioadmin
# MinIO 인증을 위한 시크릿 키
MINIO_SECRET_KEY=minioadmin
# ETCD 서비스 엔드포인트
ETCD_ENDPOINTS=etcd:2379
# MinIO 서비스 주소
MINIO_ADDRESS=minio:9000
# 보안 인증 활성화 여부
MILVUS_AUTHORIZATION_ENABLED=true

# ------------------------------
# pgvector / pgvector-rs 서비스를 위한 환경 변수
# (VECTOR_STORE가 pgvector / pgvector-rs일 때만 사용됨)
# ------------------------------
PGVECTOR_PGUSER=postgres
# 기본 postgres 사용자의 비밀번호.
PGVECTOR_POSTGRES_PASSWORD=difyai123456
# 기본 postgres 데이터베이스의 이름.
PGVECTOR_POSTGRES_DB=dify
# postgres 데이터 디렉토리
PGVECTOR_PGDATA=/var/lib/postgresql/data/pgdata

# ------------------------------
# opensearch를 위한 환경 변수
# (VECTOR_STORE가 opensearch일 때만 사용됨)
# ------------------------------
OPENSEARCH_DISCOVERY_TYPE=single-node
OPENSEARCH_BOOTSTRAP_MEMORY_LOCK=true
OPENSEARCH_JAVA_OPTS_MIN=512m
OPENSEARCH_JAVA_OPTS_MAX=1024m
OPENSEARCH_INITIAL_ADMIN_PASSWORD=Qazwsxedc!@#123
OPENSEARCH_MEMLOCK_SOFT=-1
OPENSEARCH_MEMLOCK_HARD=-1
OPENSEARCH_NOFILE_SOFT=65536
OPENSEARCH_NOFILE_HARD=65536

# ------------------------------
# Nginx 리버스 프록시를 위한 환경 변수
# ------------------------------
NGINX_SERVER_NAME=_
NGINX_HTTPS_ENABLED=false
# HTTP 포트
NGINX_PORT=80
# SSL 설정은 HTTPS_ENABLED가 true일 때만 적용됩니다
NGINX_SSL_PORT=443
# HTTPS_ENABLED가 true인 경우, `./nginx/ssl` 디렉토리에 SSL 인증서/키를 추가하고
# 아래 환경 변수를 적절히 수정해야 합니다.
NGINX_SSL_CERT_FILENAME=dify.crt
NGINX_SSL_CERT_KEY_FILENAME=dify.key
NGINX_SSL_PROTOCOLS=TLSv1.1 TLSv1.2 TLSv1.3

# Nginx 성능 튜닝
NGINX_WORKER_PROCESSES=auto
NGINX_CLIENT_MAX_BODY_SIZE=15M
NGINX_KEEPALIVE_TIMEOUT=65

# 프록시 설정
NGINX_PROXY_READ_TIMEOUT=3600s
NGINX_PROXY_SEND_TIMEOUT=3600s

# /.well-known/acme-challenge/ 요청 수락 여부
NGINX_ENABLE_CERTBOT_CHALLENGE=false

# ------------------------------
# Certbot 설정
# ------------------------------

# 이메일 주소 (Let's Encrypt에서 인증서를 받기 위해 필요)
CERTBOT_EMAIL=your_email@example.com

# 도메인 이름
CERTBOT_DOMAIN=your_domain.com

# certbot 명령 옵션
# 예: --force-renewal --dry-run --test-cert --debug
CERTBOT_OPTIONS=

# ------------------------------
# SSRF 프록시를 위한 환경 변수
# ------------------------------
SSRF_HTTP_PORT=3128
SSRF_COREDUMP_DIR=/var/spool/squid
SSRF_REVERSE_PROXY_PORT=8194
SSRF_SANDBOX_HOST=sandbox

# ------------------------------
# 시작 시 벡터 DB 유형을 지정하기 위한 도커 환경 변수
# (벡터 DB 유형에 따라 해당하는 도커 컴포즈 프로필이 사용됨)
# unstructured를 사용하려면 끝에 ',unstructured'를 추가
# ------------------------------
COMPOSE_PROFILES=${VECTOR_STORE:-weaviate}

# ------------------------------
# Docker Compose 서비스 노출 호스트 포트 설정
# ------------------------------
EXPOSE_NGINX_PORT=80
EXPOSE_NGINX_SSL_PORT=443

# ----------------------------------------------------------------------------
# ModelProvider & Tool 위치 설정
# 앱에서 사용할 수 있는 모델 제공자와 도구를 지정하는데 사용됩니다.
# ----------------------------------------------------------------------------

# 도구 고정, 포함, 제외
# 쉼표로 구분된 값을 사용하며 항목 사이에 공백이 없어야 합니다.
# 예시: POSITION_TOOL_PINS=bing,google
POSITION_TOOL_PINS=
POSITION_TOOL_INCLUDES=
POSITION_TOOL_EXCLUDES=

# 모델 제공자 고정, 포함, 제외
# 쉼표로 구분된 값을 사용하며 항목 사이에 공백이 없어야 합니다.
# 예시: POSITION_PROVIDER_PINS=openai,openllm
POSITION_PROVIDER_PINS=
POSITION_PROVIDER_INCLUDES=
POSITION_PROVIDER_EXCLUDES=

# CSP https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
# CSP 화이트리스트
CSP_WHITELIST=

# tidb 서비스 작업 생성 활성화 또는 비활성화
CREATE_TIDB_SERVICE_JOB_ENABLED=false

# 병렬 노드 실행을 위한 ThreadPool의 최대 제출 스레드 수
MAX_SUBMIT_COUNT=100

# RAG를 위한 top-k 값의 최대값
TOP_K_MAX_VALUE=10


